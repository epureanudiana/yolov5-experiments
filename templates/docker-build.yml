"""
In Azure DevOps pipelines, both variables and parameters can be used to pass values to the pipeline. However, there are
 some differences between them:

Scope: Variables are defined in the pipeline or in a pipeline template and can be used across stages, while parameters
 are defined for a specific stage or job.
Default values: Variables can have default values defined in the pipeline or pipeline template, while parameters 
require a value to be specified when the pipeline is run.
Modifiability: Variables can be modified within a pipeline or pipeline template, while parameters cannot be modified 
within a pipeline.
Usage: Variables are typically used to define values that are used across stages and jobs, while parameters are
typically used to pass values specific to a stage or job.
In general, variables are more flexible and can be used in more situations, while parameters are more specific and can 
help to ensure that the correct values are passed to a stage or job.

"""

"""
Templates can correspond to either a stage or a job in an Azure DevOps pipeline.

If you have a set of steps that you want to reuse across multiple stages or jobs, you can define them in a template 
and then reference that template in each stage or job where it is needed. In this case, the template corresponds to a 
set of steps that can be used in multiple stages or jobs.

Alternatively, if you have a complex stage or job that you want to simplify or break into smaller reusable parts, 
you can define a template for that specific stage or job. In this case, the template corresponds to the entire stage 
or job.

Overall, templates can be used to simplify and reuse complex or repetitive parts of an Azure DevOps pipeline,
 regardless of whether they correspond to a stage or a job.
"""
parameters:
- name: dockerhub_connection
  type: string
  default: ''

- name: dockerhub_repository
  type: string
  default: ''

steps:
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    containerRegistry: ${{ parameters.dockerhub_connection }}
    repository: ${{ parameters.dockerhub_repository }}
    command: 'build'
    Dockerfile: app.Dockerfile
    buildContext: .
    tags: "latest"

- task: Docker@2
  displayName: 'Push Docker image to Docker Hub'
  inputs:
    containerRegistry: ${{ parameters.dockerhub_connection }}
    repository: ${{ parameters.dockerhub_repository }}
    command: 'push'
    Dockerfile: app.Dockerfile
    tags: "latest"
